// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ajBd7QwKoQEZw4eSnuM8eE
// Component: EkB8C0-Ntx
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_jorgekauffman_com.module.css" // plasmic-import: ajBd7QwKoQEZw4eSnuM8eE/projectcss
import * as sty from "./PlasmicClients.module.css" // plasmic-import: EkB8C0-Ntx/css

import AppletisersvgIcon from "./icons/PlasmicIcon__Appletisersvg" // plasmic-import: WzK2HmrWNy/icon
import BidvestsvgIcon from "./icons/PlasmicIcon__Bidvestsvg" // plasmic-import: DI7i8q4a_B/icon
import CheckerssvgIcon from "./icons/PlasmicIcon__Checkerssvg" // plasmic-import: DIriwib_NR/icon
import CocaColasvgIcon from "./icons/PlasmicIcon__CocaColasvg" // plasmic-import: miGgoM8FTD/icon
import GoodyearsvgIcon from "./icons/PlasmicIcon__Goodyearsvg" // plasmic-import: ZjoKf1mRoR/icon
import JohnsonJohnsonsvgIcon from "./icons/PlasmicIcon__JohnsonJohnsonsvg" // plasmic-import: hFlIjKjEz-/icon
import MansvgIcon from "./icons/PlasmicIcon__Mansvg" // plasmic-import: 51q9JvMhU7/icon
import NissansvgIcon from "./icons/PlasmicIcon__Nissansvg" // plasmic-import: gA_cBRpq0v/icon
import RclsvgIcon from "./icons/PlasmicIcon__Rclsvg" // plasmic-import: mulXVWm8fU/icon
import SabMillersvgIcon from "./icons/PlasmicIcon__SabMillersvg" // plasmic-import: VUZZhYOj9V/icon
import ShopritesvgIcon from "./icons/PlasmicIcon__Shopritesvg" // plasmic-import: abjEGXuWD_/icon
import Sixty60SvgIcon from "./icons/PlasmicIcon__Sixty60Svg" // plasmic-import: 8a_ijVbRNm/icon

export type PlasmicClients__VariantMembers = {}

export type PlasmicClients__VariantsArgs = {}
type VariantPropType = keyof PlasmicClients__VariantsArgs
export const PlasmicClients__VariantProps = new Array<VariantPropType>()

export type PlasmicClients__ArgsType = {
  client?: React.ReactNode
  client2?: React.ReactNode
  client3?: React.ReactNode
  client4?: React.ReactNode
  client5?: React.ReactNode
  client6?: React.ReactNode
  client7?: React.ReactNode
  client8?: React.ReactNode
  client9?: React.ReactNode
  client10?: React.ReactNode
  client11?: React.ReactNode
  client12?: React.ReactNode
}

type ArgPropType = keyof PlasmicClients__ArgsType
export const PlasmicClients__ArgProps = new Array<ArgPropType>(
  "client",
  "client2",
  "client3",
  "client4",
  "client5",
  "client6",
  "client7",
  "client8",
  "client9",
  "client10",
  "client11",
  "client12"
)

export type PlasmicClients__OverridesType = {
  root?: p.Flex<"div">
  box?: p.Flex<"div">
}

export interface DefaultClientsProps {
  client?: React.ReactNode
  client2?: React.ReactNode
  client3?: React.ReactNode
  client4?: React.ReactNode
  client5?: React.ReactNode
  client6?: React.ReactNode
  client7?: React.ReactNode
  client8?: React.ReactNode
  client9?: React.ReactNode
  client10?: React.ReactNode
  client11?: React.ReactNode
  client12?: React.ReactNode
  className?: string
}

function PlasmicClients__RenderFunc(props: {
  variants: PlasmicClients__VariantsArgs
  args: PlasmicClients__ArgsType
  overrides: PlasmicClients__OverridesType
  dataFetches?: PlasmicClients__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <AppletisersvgIcon
              className={classNames(defaultcss.all, sty.svg__maExI)}
              role={"img"}
            />
          ),

          value: args.client,
          className: classNames(sty.slotClient),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <BidvestsvgIcon
              className={classNames(defaultcss.all, sty.svg__x8KuW)}
              role={"img"}
            />
          ),

          value: args.client2,
          className: classNames(sty.slotClient2),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <CheckerssvgIcon
              className={classNames(defaultcss.all, sty.svg__ldDmj)}
              role={"img"}
            />
          ),

          value: args.client3,
          className: classNames(sty.slotClient3),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <CocaColasvgIcon
              className={classNames(defaultcss.all, sty.svg__pmCk)}
              role={"img"}
            />
          ),

          value: args.client4,
          className: classNames(sty.slotClient4),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <GoodyearsvgIcon
              className={classNames(defaultcss.all, sty.svg__sLxOn)}
              role={"img"}
            />
          ),

          value: args.client5,
          className: classNames(sty.slotClient5),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <JohnsonJohnsonsvgIcon
              className={classNames(defaultcss.all, sty.svg___74DBs)}
              role={"img"}
            />
          ),

          value: args.client6,
          className: classNames(sty.slotClient6),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <MansvgIcon
              className={classNames(defaultcss.all, sty.svg__b0Ypl)}
              role={"img"}
            />
          ),

          value: args.client7,
          className: classNames(sty.slotClient7),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <NissansvgIcon
              className={classNames(defaultcss.all, sty.svg__q5QCf)}
              role={"img"}
            />
          ),

          value: args.client8,
          className: classNames(sty.slotClient8),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <RclsvgIcon
              className={classNames(defaultcss.all, sty.svg___4C2Uf)}
              role={"img"}
            />
          ),

          value: args.client9,
          className: classNames(sty.slotClient9),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <SabMillersvgIcon
              className={classNames(defaultcss.all, sty.svg__mq4Bf)}
              role={"img"}
            />
          ),

          value: args.client10,
          className: classNames(sty.slotClient10),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <ShopritesvgIcon
              className={classNames(defaultcss.all, sty.svg__ryLOy)}
              role={"img"}
            />
          ),

          value: args.client11,
          className: classNames(sty.slotClient11),
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <Sixty60SvgIcon
              className={classNames(defaultcss.all, sty.svg__iAo7N)}
              role={"img"}
            />
          ),

          value: args.client12,
          className: classNames(sty.slotClient12),
        })}
      </p.Stack>
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "box"],
  box: ["box"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  box: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicClients__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicClients__VariantsArgs
  args?: PlasmicClients__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicClients__Fetches
} & Omit<PlasmicClients__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicClients__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicClients__ArgProps,
      internalVariantPropNames: PlasmicClients__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicClients__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicClients"
  } else {
    func.displayName = `PlasmicClients.${nodeName}`
  }
  return func
}

export const PlasmicClients = Object.assign(
  // Top-level PlasmicClients renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),

    // Metadata about props expected for PlasmicClients
    internalVariantProps: PlasmicClients__VariantProps,
    internalArgProps: PlasmicClients__ArgProps,
  }
)

export default PlasmicClients
/* prettier-ignore-end */
