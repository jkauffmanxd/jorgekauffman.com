// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ajBd7QwKoQEZw4eSnuM8eE
// Component: UEBh2ZCTKG
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_jorgekauffman_com.module.css" // plasmic-import: ajBd7QwKoQEZw4eSnuM8eE/projectcss
import * as sty from "./PlasmicWhy.module.css" // plasmic-import: UEBh2ZCTKG/css

import DesignPencilsvgIcon from "./icons/PlasmicIcon__DesignPencilsvg" // plasmic-import: C9cgtb0SIc/icon
import LightIcon from "./icons/PlasmicIcon__Light" // plasmic-import: ECM3QTOfDR/icon
import CreditCardsvgIcon from "./icons/PlasmicIcon__CreditCardsvg" // plasmic-import: N8DdryWwMJ/icon
import SmileysvgIcon from "./icons/PlasmicIcon__Smileysvg" // plasmic-import: uDNJl1L6v/icon
import Sapsvg2Icon from "./icons/PlasmicIcon__Sapsvg2" // plasmic-import: tskSNOJWEm/icon

export type PlasmicWhy__VariantMembers = {}

export type PlasmicWhy__VariantsArgs = {}
type VariantPropType = keyof PlasmicWhy__VariantsArgs
export const PlasmicWhy__VariantProps = new Array<VariantPropType>()

export type PlasmicWhy__ArgsType = {}
type ArgPropType = keyof PlasmicWhy__ArgsType
export const PlasmicWhy__ArgProps = new Array<ArgPropType>()

export type PlasmicWhy__OverridesType = {
  root?: p.Flex<"div">
  decadeDesign?: p.Flex<"div">
  _4Elearning?: p.Flex<"div">
  rewardsSucess?: p.Flex<"div">
  _250KPeople?: p.Flex<"div">
  largestSap?: p.Flex<"div">
}

export interface DefaultWhyProps {
  className?: string
}

function PlasmicWhy__RenderFunc(props: {
  variants: PlasmicWhy__VariantsArgs
  args: PlasmicWhy__ArgsType
  overrides: PlasmicWhy__OverridesType
  dataFetches?: PlasmicWhy__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__qirWj)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__oRkQd
          )}
        >
          {"Why"}
        </div>

        <div className={classNames(defaultcss.all, sty.box___0DH7)}>
          <div
            data-plasmic-name={"decadeDesign"}
            data-plasmic-override={overrides.decadeDesign}
            className={classNames(defaultcss.all, sty.decadeDesign)}
          >
            <DesignPencilsvgIcon
              className={classNames(defaultcss.all, sty.svg___5Dsw9)}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__qBYnD
              )}
            >
              {"A decade under the influence of design"}
            </div>
          </div>

          <div
            data-plasmic-name={"_4Elearning"}
            data-plasmic-override={overrides._4Elearning}
            className={classNames(defaultcss.all, sty._4Elearning)}
          >
            <LightIcon
              className={classNames(defaultcss.all, sty.svg__flodk)}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__jj07J
              )}
            >
              {"4 Years eLearning Design & Development experience"}
            </div>
          </div>

          <div
            data-plasmic-name={"rewardsSucess"}
            data-plasmic-override={overrides.rewardsSucess}
            className={classNames(defaultcss.all, sty.rewardsSucess)}
          >
            <CreditCardsvgIcon
              className={classNames(defaultcss.all, sty.svg__t1KDq)}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ujKjj
              )}
            >
              {
                "Biggest and most successful Rewards Card launch in Africa, Twice in a row"
              }
            </div>
          </div>

          <div
            data-plasmic-name={"_250KPeople"}
            data-plasmic-override={overrides._250KPeople}
            className={classNames(defaultcss.all, sty._250KPeople)}
          >
            <SmileysvgIcon
              className={classNames(defaultcss.all, sty.svg__h8EX)}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__s57F
              )}
            >
              {
                "250 000+ engaged/ connected/ educated/ supported/TRANSFORMED people"
              }
            </div>
          </div>

          <div
            data-plasmic-name={"largestSap"}
            data-plasmic-override={overrides.largestSap}
            className={classNames(defaultcss.all, sty.largestSap)}
          >
            <Sapsvg2Icon
              className={classNames(defaultcss.all, sty.svg__tYf9J)}
              role={"img"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__xgcVc
              )}
            >
              {"Largest SAP Transformation project Ever"}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: [
    "root",
    "decadeDesign",
    "_4Elearning",
    "rewardsSucess",
    "_250KPeople",
    "largestSap",
  ],
  decadeDesign: ["decadeDesign"],
  _4Elearning: ["_4Elearning"],
  rewardsSucess: ["rewardsSucess"],
  _250KPeople: ["_250KPeople"],
  largestSap: ["largestSap"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  decadeDesign: "div"
  _4Elearning: "div"
  rewardsSucess: "div"
  _250KPeople: "div"
  largestSap: "div"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWhy__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicWhy__VariantsArgs
  args?: PlasmicWhy__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicWhy__Fetches
} & Omit<PlasmicWhy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicWhy__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWhy__ArgProps,
      internalVariantPropNames: PlasmicWhy__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicWhy__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicWhy"
  } else {
    func.displayName = `PlasmicWhy.${nodeName}`
  }
  return func
}

export const PlasmicWhy = Object.assign(
  // Top-level PlasmicWhy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    decadeDesign: makeNodeComponent("decadeDesign"),
    _4Elearning: makeNodeComponent("_4Elearning"),
    rewardsSucess: makeNodeComponent("rewardsSucess"),
    _250KPeople: makeNodeComponent("_250KPeople"),
    largestSap: makeNodeComponent("largestSap"),

    // Metadata about props expected for PlasmicWhy
    internalVariantProps: PlasmicWhy__VariantProps,
    internalArgProps: PlasmicWhy__ArgProps,
  }
)

export default PlasmicWhy
/* prettier-ignore-end */
