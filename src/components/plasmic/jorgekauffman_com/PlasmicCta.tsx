// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ajBd7QwKoQEZw4eSnuM8eE
// Component: 8jlGT04fGY
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_jorgekauffman_com.module.css" // plasmic-import: ajBd7QwKoQEZw4eSnuM8eE/projectcss
import * as sty from "./PlasmicCta.module.css" // plasmic-import: 8jlGT04fGY/css

import MailIcon from "./icons/PlasmicIcon__Mail" // plasmic-import: yvc4khWb0K/icon

export type PlasmicCta__VariantMembers = {}

export type PlasmicCta__VariantsArgs = {}
type VariantPropType = keyof PlasmicCta__VariantsArgs
export const PlasmicCta__VariantProps = new Array<VariantPropType>()

export type PlasmicCta__ArgsType = {}
type ArgPropType = keyof PlasmicCta__ArgsType
export const PlasmicCta__ArgProps = new Array<ArgPropType>()

export type PlasmicCta__OverridesType = {
  root?: p.Flex<"div">
  svg?: p.Flex<"svg">
  link?: p.Flex<"a"> & Partial<LinkProps>
}

export interface DefaultCtaProps {
  className?: string
}

function PlasmicCta__RenderFunc(props: {
  variants: PlasmicCta__VariantsArgs
  args: PlasmicCta__ArgsType
  overrides: PlasmicCta__OverridesType
  dataFetches?: PlasmicCta__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box___2Ljn)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__iOi1
          )}
        >
          {"Mail me and let's talk"}
        </div>

        <div className={classNames(defaultcss.all, sty.box__mNwI6)}>
          <MailIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />

          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(defaultcss.all, sty.link)}
            component={Link}
            href={"https://www.plasmic.app/" as const}
            platform={"gatsby"}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__pKxUi
              )}
            >
              {"hi@jorgekauffman.com"}
            </div>
          </p.PlasmicLink>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "svg", "link"],
  svg: ["svg"],
  link: ["link"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  svg: "svg"
  link: "a"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCta__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicCta__VariantsArgs
  args?: PlasmicCta__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicCta__Fetches
} & Omit<PlasmicCta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicCta__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCta__ArgProps,
      internalVariantPropNames: PlasmicCta__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicCta__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicCta"
  } else {
    func.displayName = `PlasmicCta.${nodeName}`
  }
  return func
}

export const PlasmicCta = Object.assign(
  // Top-level PlasmicCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicCta
    internalVariantProps: PlasmicCta__VariantProps,
    internalArgProps: PlasmicCta__ArgProps,
  }
)

export default PlasmicCta
/* prettier-ignore-end */
