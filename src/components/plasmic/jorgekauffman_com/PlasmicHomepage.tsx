// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ajBd7QwKoQEZw4eSnuM8eE
// Component: NmyuQEKN8ASo
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: L4-sxOI14B/component
import Landing from "../../Landing" // plasmic-import: rdjPX22n6c/component
import How from "../../How" // plasmic-import: DzWC2yemzg/component
import Why from "../../Why" // plasmic-import: UEBh2ZCTKG/component
import Skill from "../../Skill" // plasmic-import: V29gw2H4lR/component
import Thinking from "../../Thinking" // plasmic-import: 0MEk3eKkQO/component
import Clients from "../../Clients" // plasmic-import: EkB8C0-Ntx/component
import Cta from "../../Cta" // plasmic-import: 8jlGT04fGY/component
import Testimonials from "../../Testimonials" // plasmic-import: GbxbaH1_Ix/component
import Footer from "../../Footer" // plasmic-import: phpFMNl3Ac/component

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_jorgekauffman_com.module.css" // plasmic-import: ajBd7QwKoQEZw4eSnuM8eE/projectcss
import * as sty from "./PlasmicHomepage.module.css" // plasmic-import: NmyuQEKN8ASo/css

import AppletisersvgIcon from "./icons/PlasmicIcon__Appletisersvg" // plasmic-import: WzK2HmrWNy/icon
import Bidvestsvg2Icon from "./icons/PlasmicIcon__Bidvestsvg2" // plasmic-import: DI7i8q4a_B/icon

export type PlasmicHomepage__VariantMembers = {}

export type PlasmicHomepage__VariantsArgs = {}
type VariantPropType = keyof PlasmicHomepage__VariantsArgs
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>()

export type PlasmicHomepage__ArgsType = {}
type ArgPropType = keyof PlasmicHomepage__ArgsType
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>()

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">
  header?: p.Flex<typeof Header>
  landing?: p.Flex<typeof Landing>
  how?: p.Flex<typeof How>
  why?: p.Flex<typeof Why>
  skill?: p.Flex<typeof Skill>
  thinking?: p.Flex<typeof Thinking>
  clients?: p.Flex<typeof Clients>
  cta?: p.Flex<typeof Cta>
  testimonials?: p.Flex<typeof Testimonials>
  footer?: p.Flex<typeof Footer>
}

export interface DefaultHomepageProps {
  className?: string
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs
  args: PlasmicHomepage__ArgsType
  overrides: PlasmicHomepage__OverridesType
  dataFetches?: PlasmicHomepage__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Landing
            data-plasmic-name={"landing"}
            data-plasmic-override={overrides.landing}
            className={classNames("__wab_instance", sty.landing)}
          />

          <How
            data-plasmic-name={"how"}
            data-plasmic-override={overrides.how}
            className={classNames("__wab_instance", sty.how)}
          />

          <Why
            data-plasmic-name={"why"}
            data-plasmic-override={overrides.why}
            className={classNames("__wab_instance", sty.why)}
          />

          <Skill
            data-plasmic-name={"skill"}
            data-plasmic-override={overrides.skill}
            className={classNames("__wab_instance", sty.skill)}
          />

          <Thinking
            data-plasmic-name={"thinking"}
            data-plasmic-override={overrides.thinking}
            className={classNames("__wab_instance", sty.thinking)}
          />

          <Clients
            data-plasmic-name={"clients"}
            data-plasmic-override={overrides.clients}
            className={classNames("__wab_instance", sty.clients)}
          />

          <Cta
            data-plasmic-name={"cta"}
            data-plasmic-override={overrides.cta}
            className={classNames("__wab_instance", sty.cta)}
          />

          <Testimonials
            data-plasmic-name={"testimonials"}
            data-plasmic-override={overrides.testimonials}
            className={classNames("__wab_instance", sty.testimonials)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "landing",
    "how",
    "why",
    "skill",
    "thinking",
    "clients",
    "cta",
    "testimonials",
    "footer",
  ],
  header: ["header"],
  landing: ["landing"],
  how: ["how"],
  why: ["why"],
  skill: ["skill"],
  thinking: ["thinking"],
  clients: ["clients"],
  cta: ["cta"],
  testimonials: ["testimonials"],
  footer: ["footer"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  header: typeof Header
  landing: typeof Landing
  how: typeof How
  why: typeof Why
  skill: typeof Skill
  thinking: typeof Thinking
  clients: typeof Clients
  cta: typeof Cta
  testimonials: typeof Testimonials
  footer: typeof Footer
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHomepage__VariantsArgs
  args?: PlasmicHomepage__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicHomepage__Fetches
} & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage"
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`
  }
  return func
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    landing: makeNodeComponent("landing"),
    how: makeNodeComponent("how"),
    why: makeNodeComponent("why"),
    skill: makeNodeComponent("skill"),
    thinking: makeNodeComponent("thinking"),
    clients: makeNodeComponent("clients"),
    cta: makeNodeComponent("cta"),
    testimonials: makeNodeComponent("testimonials"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
  }
)

export default PlasmicHomepage
/* prettier-ignore-end */
