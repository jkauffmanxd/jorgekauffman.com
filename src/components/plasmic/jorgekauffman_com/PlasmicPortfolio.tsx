// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ajBd7QwKoQEZw4eSnuM8eE
// Component: uB6KPgzvRT
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: SZVtHIOnzF/component
import PortfolioTopic from "../../PortfolioTopic" // plasmic-import: XMg4kg4uAM/component
import Cta from "../../Cta" // plasmic-import: 8jlGT04fGY/component
import Footer from "../../Footer" // plasmic-import: phpFMNl3Ac/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: 7Ert-5G3sU4L/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_jorgekauffman_com.module.css" // plasmic-import: ajBd7QwKoQEZw4eSnuM8eE/projectcss
import * as sty from "./PlasmicPortfolio.module.css" // plasmic-import: uB6KPgzvRT/css

import GraduateIcon from "./icons/PlasmicIcon__Graduate" // plasmic-import: FePj_Q3I0I/icon
import jkPlaceholderHDsvgJggvDloQu from "./images/jkPlaceholderHDsvg.svg" // plasmic-import: JGGV_dloQu/picture

export type PlasmicPortfolio__VariantMembers = {}

export type PlasmicPortfolio__VariantsArgs = {}
type VariantPropType = keyof PlasmicPortfolio__VariantsArgs
export const PlasmicPortfolio__VariantProps = new Array<VariantPropType>()

export type PlasmicPortfolio__ArgsType = {}
type ArgPropType = keyof PlasmicPortfolio__ArgsType
export const PlasmicPortfolio__ArgProps = new Array<ArgPropType>()

export type PlasmicPortfolio__OverridesType = {
  root?: p.Flex<"div">
  header?: p.Flex<typeof Header>
  epithets?: p.Flex<"div">
  resultOrientedViaStrategyEmpathyAndArtistry?: p.Flex<"div">
  portfolioItems?: p.Flex<"div">
  elearning?: p.Flex<typeof PortfolioTopic>
  branding?: p.Flex<typeof PortfolioTopic>
  comms?: p.Flex<typeof PortfolioTopic>
  productDesign?: p.Flex<typeof PortfolioTopic>
  joyOfCreation?: p.Flex<typeof PortfolioTopic>
  cta?: p.Flex<typeof Cta>
  footer?: p.Flex<typeof Footer>
}

export interface DefaultPortfolioProps {
  className?: string
}

function PlasmicPortfolio__RenderFunc(props: {
  variants: PlasmicPortfolio__VariantsArgs
  args: PlasmicPortfolio__ArgsType
  overrides: PlasmicPortfolio__OverridesType
  dataFetches?: PlasmicPortfolio__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"epithets"}
            data-plasmic-override={overrides.epithets}
            hasGap={
              hasVariant(globalVariants, "screen", "desktopOnly") ? true : false
            }
            className={classNames(defaultcss.all, sty.epithets)}
          >
            <p.Stack
              as={"div"}
              hasGap={
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : false
              }
              className={classNames(defaultcss.all, sty.box__vFsZv)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__g3Ydk
                )}
              >
                {"Inspiration.\nIdeation.\nImplementation."}
              </div>

              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? false
                  : false
              ) ? (
                <div
                  data-plasmic-name={
                    "resultOrientedViaStrategyEmpathyAndArtistry"
                  }
                  data-plasmic-override={
                    overrides.resultOrientedViaStrategyEmpathyAndArtistry
                  }
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.resultOrientedViaStrategyEmpathyAndArtistry
                  )}
                >
                  {"People-first design."}
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"portfolioItems"}
            data-plasmic-override={overrides.portfolioItems}
            className={classNames(defaultcss.all, sty.portfolioItems)}
          >
            <PortfolioTopic
              data-plasmic-name={"elearning"}
              data-plasmic-override={overrides.elearning}
              className={classNames("__wab_instance", sty.elearning)}
              slot={"Human-centered goal-oriented learning experiences."}
              work={
                <React.Fragment>
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img___08CGf)}
                    role={"img"}
                    src={jkPlaceholderHDsvgJggvDloQu}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__kNfuU)}
                    role={"img"}
                    src={jkPlaceholderHDsvgJggvDloQu}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img___0Z2E9)}
                    role={"img"}
                    src={jkPlaceholderHDsvgJggvDloQu}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__crXq5)}
                    role={"img"}
                    src={jkPlaceholderHDsvgJggvDloQu}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__yJnQi)}
                    role={"img"}
                    src={jkPlaceholderHDsvgJggvDloQu}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__uMb)}
                    role={"img"}
                    src={jkPlaceholderHDsvgJggvDloQu}
                  />
                </React.Fragment>
              }
            />

            <PortfolioTopic
              data-plasmic-name={"branding"}
              data-plasmic-override={overrides.branding}
              className={classNames("__wab_instance", sty.branding)}
              slot={"Make them care."}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__tkWmn
                )}
              >
                {"Branding"}
              </div>
            </PortfolioTopic>

            <PortfolioTopic
              data-plasmic-name={"comms"}
              data-plasmic-override={overrides.comms}
              className={classNames("__wab_instance", sty.comms)}
              slot={"Connecting people with delight."}
            >
              {"Communications"}
            </PortfolioTopic>

            <PortfolioTopic
              data-plasmic-name={"productDesign"}
              data-plasmic-override={overrides.productDesign}
              className={classNames("__wab_instance", sty.productDesign)}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__tM8GR
                  )}
                >
                  {"Satisfunction."}
                </div>
              }
            >
              {"Product Design"}
            </PortfolioTopic>

            <PortfolioTopic
              data-plasmic-name={"joyOfCreation"}
              data-plasmic-override={overrides.joyOfCreation}
              className={classNames("__wab_instance", sty.joyOfCreation)}
              slot={"The Agony and the Ecstacy."}
            >
              {"The Joy of Creation"}
            </PortfolioTopic>

            <Cta
              data-plasmic-name={"cta"}
              data-plasmic-override={overrides.cta}
              className={classNames("__wab_instance", sty.cta)}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__u4Ijj
              )}
            >
              {hasVariant(globalVariants, "screen", "desktopOnly")
                ? "Result oriented via strategy, empathy and artistry."
                : "Result oriented via strategy, empathy and artistry."}
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "epithets",
    "resultOrientedViaStrategyEmpathyAndArtistry",
    "portfolioItems",
    "elearning",
    "branding",
    "comms",
    "productDesign",
    "joyOfCreation",
    "cta",
    "footer",
  ],
  header: ["header"],
  epithets: ["epithets", "resultOrientedViaStrategyEmpathyAndArtistry"],
  resultOrientedViaStrategyEmpathyAndArtistry: [
    "resultOrientedViaStrategyEmpathyAndArtistry",
  ],
  portfolioItems: [
    "portfolioItems",
    "elearning",
    "branding",
    "comms",
    "productDesign",
    "joyOfCreation",
    "cta",
  ],
  elearning: ["elearning"],
  branding: ["branding"],
  comms: ["comms"],
  productDesign: ["productDesign"],
  joyOfCreation: ["joyOfCreation"],
  cta: ["cta"],
  footer: ["footer"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  header: typeof Header
  epithets: "div"
  resultOrientedViaStrategyEmpathyAndArtistry: "div"
  portfolioItems: "div"
  elearning: typeof PortfolioTopic
  branding: typeof PortfolioTopic
  comms: typeof PortfolioTopic
  productDesign: typeof PortfolioTopic
  joyOfCreation: typeof PortfolioTopic
  cta: typeof Cta
  footer: typeof Footer
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolio__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPortfolio__VariantsArgs
  args?: PlasmicPortfolio__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicPortfolio__Fetches
} & Omit<PlasmicPortfolio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPortfolio__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPortfolio__ArgProps,
      internalVariantPropNames: PlasmicPortfolio__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicPortfolio__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicPortfolio"
  } else {
    func.displayName = `PlasmicPortfolio.${nodeName}`
  }
  return func
}

export const PlasmicPortfolio = Object.assign(
  // Top-level PlasmicPortfolio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    epithets: makeNodeComponent("epithets"),
    resultOrientedViaStrategyEmpathyAndArtistry: makeNodeComponent(
      "resultOrientedViaStrategyEmpathyAndArtistry"
    ),
    portfolioItems: makeNodeComponent("portfolioItems"),
    elearning: makeNodeComponent("elearning"),
    branding: makeNodeComponent("branding"),
    comms: makeNodeComponent("comms"),
    productDesign: makeNodeComponent("productDesign"),
    joyOfCreation: makeNodeComponent("joyOfCreation"),
    cta: makeNodeComponent("cta"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPortfolio
    internalVariantProps: PlasmicPortfolio__VariantProps,
    internalArgProps: PlasmicPortfolio__ArgProps,
  }
)

export default PlasmicPortfolio
/* prettier-ignore-end */
