// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ajBd7QwKoQEZw4eSnuM8eE
// Component: uB6KPgzvRT
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: L4-sxOI14B/component
import PortfolioTopic from "../../PortfolioTopic" // plasmic-import: XMg4kg4uAM/component
import Footer from "../../Footer" // plasmic-import: phpFMNl3Ac/component

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_jorgekauffman_com.module.css" // plasmic-import: ajBd7QwKoQEZw4eSnuM8eE/projectcss
import * as sty from "./PlasmicPortfolio.module.css" // plasmic-import: uB6KPgzvRT/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6" // plasmic-import: FePj_Q3I0I/icon
import BookIcon from "./icons/PlasmicIcon__Book" // plasmic-import: -hYKTQDUi-/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5" // plasmic-import: DVc11YrLFH/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4" // plasmic-import: MRX__q9AVG/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7" // plasmic-import: KVxmohl6M2/icon

export type PlasmicPortfolio__VariantMembers = {}

export type PlasmicPortfolio__VariantsArgs = {}
type VariantPropType = keyof PlasmicPortfolio__VariantsArgs
export const PlasmicPortfolio__VariantProps = new Array<VariantPropType>()

export type PlasmicPortfolio__ArgsType = {}
type ArgPropType = keyof PlasmicPortfolio__ArgsType
export const PlasmicPortfolio__ArgProps = new Array<ArgPropType>()

export type PlasmicPortfolio__OverridesType = {
  root?: p.Flex<"div">
  header?: p.Flex<typeof Header>
  epithets?: p.Flex<"div">
  portfolioItems?: p.Flex<"div">
  footer?: p.Flex<typeof Footer>
}

export interface DefaultPortfolioProps {
  className?: string
}

function PlasmicPortfolio__RenderFunc(props: {
  variants: PlasmicPortfolio__VariantsArgs
  args: PlasmicPortfolio__ArgsType
  overrides: PlasmicPortfolio__OverridesType
  dataFetches?: PlasmicPortfolio__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"epithets"}
            data-plasmic-override={overrides.epithets}
            className={classNames(defaultcss.all, sty.epithets)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__g3Ydk
              )}
            >
              {"Inspiration\nIdeation\nImplementation"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__ee1Qn
              )}
            >
              {"People-first design"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__okpBm
              )}
            >
              {"Human-centered\r\ngoal-oriented\r\nlearning experiences"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__mnJMh
              )}
            >
              {"Satisfunction"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__u4Ijj
              )}
            >
              {"Result oriented via strategy, empathy and artistry."}
            </div>
          </div>

          <div
            data-plasmic-name={"portfolioItems"}
            data-plasmic-override={overrides.portfolioItems}
            className={classNames(defaultcss.all, sty.portfolioItems)}
          >
            <PortfolioTopic
              className={classNames(
                "__wab_instance",
                sty.portfolioTopic__qqWhk
              )}
              slot={
                <Icon6Icon
                  className={classNames(defaultcss.all, sty.svg__bPbkJ)}
                  role={"img"}
                />
              }
            />

            <PortfolioTopic
              className={classNames(
                "__wab_instance",
                sty.portfolioTopic__pavEn
              )}
              slot={
                <BookIcon
                  className={classNames(defaultcss.all, sty.svg__clzte)}
                  role={"img"}
                />
              }
            >
              {"Brand Development"}
            </PortfolioTopic>

            <PortfolioTopic
              className={classNames(
                "__wab_instance",
                sty.portfolioTopic__le49M
              )}
              slot={
                <Icon5Icon
                  className={classNames(defaultcss.all, sty.svg__nnjeY)}
                  role={"img"}
                />
              }
            >
              {"Communications"}
            </PortfolioTopic>

            <PortfolioTopic
              className={classNames(
                "__wab_instance",
                sty.portfolioTopic__oDsWy
              )}
              slot={
                <Icon4Icon
                  className={classNames(defaultcss.all, sty.svg___7GTmR)}
                  role={"img"}
                />
              }
            >
              {"Product Design"}
            </PortfolioTopic>

            <PortfolioTopic
              className={classNames(
                "__wab_instance",
                sty.portfolioTopic___3TsVo
              )}
              slot={
                <Icon7Icon
                  className={classNames(defaultcss.all, sty.svg__wD8Ox)}
                  role={"img"}
                />
              }
            >
              {"The Joy of Creation"}
            </PortfolioTopic>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "header", "epithets", "portfolioItems", "footer"],
  header: ["header"],
  epithets: ["epithets"],
  portfolioItems: ["portfolioItems"],
  footer: ["footer"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  header: typeof Header
  epithets: "div"
  portfolioItems: "div"
  footer: typeof Footer
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPortfolio__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicPortfolio__VariantsArgs
  args?: PlasmicPortfolio__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicPortfolio__Fetches
} & Omit<PlasmicPortfolio__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicPortfolio__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPortfolio__ArgProps,
      internalVariantPropNames: PlasmicPortfolio__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicPortfolio__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicPortfolio"
  } else {
    func.displayName = `PlasmicPortfolio.${nodeName}`
  }
  return func
}

export const PlasmicPortfolio = Object.assign(
  // Top-level PlasmicPortfolio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    epithets: makeNodeComponent("epithets"),
    portfolioItems: makeNodeComponent("portfolioItems"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPortfolio
    internalVariantProps: PlasmicPortfolio__VariantProps,
    internalArgProps: PlasmicPortfolio__ArgProps,
  }
)

export default PlasmicPortfolio
/* prettier-ignore-end */
